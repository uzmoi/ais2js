// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`accessors > index 1`] = `
"get_index(target, index, [1, 6]);
"
`;

exports[`accessors > prop 1`] = `
"get_prop(target, "prop", [1, 6]);
"
`;

exports[`assignment > dest 1`] = `
"const d = null;
const __dest__ = a;
const __dest__2 = get_index(__dest__, 0, [3, 7]);
b = get_prop(__dest__2, "identifier", [3, 21]);
set_prop(b, "c", get_prop(__dest__2, "prop", [3, 31]), [3, 31]);
set_index(b, c, get_prop(__dest__2, "index", [3, 43]), [3, 43]);
internal_error("immutable_variable", "d", [3, 50]);
"
`;

exports[`assignment > identifier 1`] = `
"const __ref__ = 1;
a = __ref__;
const __ref__2 = 2;
a += __ref__2;
const __ref__3 = 3;
a -= __ref__3;
const b = 4;
const __ref__4 = 5;
internal_error("immutable_variable", "b", [6, 6]);
"
`;

exports[`assignment > index 1`] = `
"const __ref__ = 1;
set_index(a, b, __ref__, [2, 7]);
const __ref__2 = 2;
set_index(a, b, get_index(a, b) + __ref__2);
const __ref__3 = 3;
set_index(a, b, get_index(a, b) - __ref__3);
"
`;

exports[`assignment > prop 1`] = `
"const __ref__ = 1;
set_prop(a, "b", __ref__, [2, 7]);
const __ref__2 = 2;
set_prop(a, "b", get_prop(a, "b") + __ref__2);
const __ref__3 = 3;
set_prop(a, "b", get_prop(a, "b") - __ref__3);
"
`;

exports[`flow > each 1`] = `
"assert_array(xs, [1, 13]);
for (const __each_element__ of xs) {
  const x = __each_element__;
  const __run_result__ = x;
}
"
`;

exports[`flow > eval 1`] = `
"const a = 0;
const a2 = 1;
const __run_result__ = a2;
const b = __run_result__;
"
`;

exports[`flow > for 1`] = `
"const __ref__ = 10;
assert_number(__ref__, [1, 4]);
for (let __for_index__ = 0; __for_index__ < __ref__; __for_index__++) {
  continue;
}
"
`;

exports[`flow > for-i 1`] = `
"const __ref__ = 0;
const __ref__2 = 10;
assert_number(__ref__, [1, 9]);
assert_number(__ref__2, [1, 12]);
for (let i = __ref__; i < __ref__ + __ref__2; i++) {
  const __run_result__ = i;
}
"
`;

exports[`flow > if 1`] = `
"assert_boolean(cond, [2, 9]);
let __if_result__ = null;
if (cond) {
  __if_result__ = 1;
} else {
  assert_boolean(cond, [2, 21]);
  let __if_result__2 = null;
  if (cond) {
    __if_result__2 = 2;
  } else {
    __if_result__2 = 3;
  }
  __if_result__ = __if_result__2;
}
__if_result__;
"
`;

exports[`flow > loop 1`] = `
"while (true) {
  break;
}
"
`;

exports[`fn > arguments > default 1`] = `
"const __ref__ = 0;
const hoge = async arg_0 => {
  const arg = arg_0;
  return null;
};
"
`;

exports[`fn > arguments > dest 1`] = `
"const hoge = async arg_0 => {
  const __dest__ = arg_0;
  const __dest__2 = get_prop(__dest__, "fuga", [1, 15]);
  const piyo = get_index(__dest__2, 0, [1, 16]);
  const __run_result__ = piyo;
  return __run_result__;
};
"
`;

exports[`fn > arguments > reference 1`] = `
"const identify = async arg_0 => {
  const value = arg_0;
  const __run_result__ = value;
  return __run_result__;
};
"
`;

exports[`fn > call 1`] = `
"await call(f, [], [1, 1]);
"
`;

exports[`fn > implicit return 1`] = `
"const hoge = async () => {
  const __run_result__ = 0;
  return __run_result__;
};
"
`;

exports[`fn > noop fn 1`] = `
"const noop = async () => {
  return null;
};
"
`;

exports[`fn > return 1`] = `
"const hoge = async () => {
  return 0;
  return null;
};
"
`;

exports[`literals > array 1`] = `
"const __ref__ = 0;
const __ref__2 = 1;
const __ref__3 = 2;
const __ref__4 = 3;
[__ref__, __ref__2, __ref__3, __ref__4];
"
`;

exports[`literals > boolean 1`] = `
"true;
false;
"
`;

exports[`literals > null 1`] = `
"null;
"
`;

exports[`literals > number 1`] = `
"0;
6.28;
1024;
"
`;

exports[`literals > object 1`] = `
"const __ref__ = 0;
const __ref__2 = 1;
new Map([["a", __ref__], ["b", __ref__2]]);
"
`;

exports[`literals > string 1`] = `
""hoge";
"
`;

exports[`literals > tmpl 1`] = `
"let __tmpl__ = "";
__tmpl__ += repr("Hello ");
__tmpl__ += repr(name);
__tmpl__ += repr("!");
__tmpl__;
"
`;

exports[`namespace > reference 1`] = `
"const Foo_Foo_hoge = 0;
const Foo_hoge = Foo_Foo_hoge;
await call(print, [Foo_hoge], [2, 6]);
await call(print, [Foo_Foo_hoge], [3, 6]);
"
`;

exports[`operators > binary > add 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 4]);
a + b;
"
`;

exports[`operators > binary > div 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 4]);
a / b;
"
`;

exports[`operators > binary > eq 1`] = `
"a === b;
"
`;

exports[`operators > binary > gt 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 4]);
a > b;
"
`;

exports[`operators > binary > gteq 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 5]);
a >= b;
"
`;

exports[`operators > binary > lt 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 4]);
a < b;
"
`;

exports[`operators > binary > lteq 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 5]);
a <= b;
"
`;

exports[`operators > binary > mul 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 4]);
a * b;
"
`;

exports[`operators > binary > neq 1`] = `
"a !== b;
"
`;

exports[`operators > binary > pow 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 4]);
a ** b;
"
`;

exports[`operators > binary > rem 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 4]);
a % b;
"
`;

exports[`operators > binary > sub 1`] = `
"assert_number(a, [1, 0]);
assert_number(b, [1, 4]);
a - b;
"
`;

exports[`operators > logic > and 1`] = `
"let __and_result__ = a;
assert_boolean(__and_result__, [1, 0]);
if (__and_result__) {
  const __ref__ = get_prop(b, "c", [1, 6]);
  __and_result__ = await call(__ref__, [], [1, 8]);
  assert_boolean(__and_result__, [1, 8]);
}
__and_result__;
"
`;

exports[`operators > logic > or 1`] = `
"let __or_result__ = a;
assert_boolean(__or_result__, [1, 0]);
if (!__or_result__) {
  const __ref__ = get_prop(b, "c", [1, 6]);
  __or_result__ = await call(__ref__, [], [1, 8]);
  assert_boolean(__or_result__, [1, 8]);
}
__or_result__;
"
`;

exports[`operators > unary > minus 1`] = `
"assert_number(a, [1, 1]);
-a;
"
`;

exports[`operators > unary > not 1`] = `
"assert_boolean(a, [1, 1]);
!a;
"
`;

exports[`operators > unary > plus 1`] = `
"assert_number(a, [1, 1]);
+a;
"
`;

exports[`variables > let 1`] = `
"const hoge = 0;
hoge;
"
`;

exports[`variables > let dest 1`] = `
"const __dest__ = a;
const __dest__2 = get_prop(__dest__, "values", [2, 21]);
const hoge = get_index(__dest__2, 0, [2, 22]);
const fuga = get_index(__dest__2, 1, [2, 28]);
hoge;
fuga;
"
`;

exports[`variables > reference 1`] = `
"hoge;
"
`;

exports[`variables > undefined 1`] = `
"internal_error("not_defined", "hoge", [1, 0]);
"
`;

exports[`variables > var 1`] = `
"let hoge = 0;
hoge;
"
`;
